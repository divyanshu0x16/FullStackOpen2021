{"version":3,"sources":["components/Persons.js","components/PersonForm.js","services/persons.js","App.js","index.js"],"names":["Persons","persons","onDelete","map","person","name","number","onClick","id","PersonForm","addPerson","newName","newNumber","handlePhoneChange","handleNumberChange","onSubmit","value","onChange","type","baseUrl","personService","getAll","axios","get","then","response","data","create","newObject","post","update","put","deletePerson","delete","Notification","message","className","Error","error","App","useState","setPersons","setNewName","setNewNumber","successMessage","setSuccessMessage","setErrorMessage","useEffect","initialPersons","event","preventDefault","newPerson","existingPerson","find","undefined","window","confirm","updatedPerson","setTimeout","returnedPerson","concat","target","deletedId","filter","catch","_","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90c8dec2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Persons = ({ persons, onDelete }) => {\n    return (\n        <div>\n            <ul>\n                {persons.map((person) => (\n                    <li key={person.id}>\n                        {person.name} {person.number} <button onClick={() => onDelete(person)} >delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst PersonForm = ({\n    addPerson,\n    newName,\n    newNumber,\n    handlePhoneChange,\n    handleNumberChange,\n}) => {\n    return (\n        <div>\n            <form onSubmit={addPerson}>\n                <div>\n                    name: <input value={newName} onChange={handlePhoneChange} />\n                </div>\n                <div>\n                    number:{\" \"}\n                    <input value={newNumber} onChange={handleNumberChange} />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default PersonForm;\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n}\n\nconst personService = { getAll, create, update, deletePerson }\n\nexport default personService;","import React, { useState, useEffect } from \"react\";\n\nimport Persons from \"./components/Persons\";\nimport PersonForm from \"./components/PersonForm\";\nimport personService from \"./services/persons\";\n\nconst Notification = ({ message }) => {\n    if (message === null) return null;\n\n    return <div className=\"message\">{message}</div>;\n};\n\nconst Error = ({ error }) => {\n    if (error === null) return null;\n\n    return <div className=\"error\">{error}</div>;\n};\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [newName, setNewName] = useState(\"\");\n    const [newNumber, setNewNumber] = useState(\"\");\n    const [successMessage, setSuccessMessage] = useState(null);\n    const [error, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        personService.getAll().then((initialPersons) => {\n            setPersons(initialPersons);\n        });\n    }, []);\n\n    const addPerson = (event) => {\n        event.preventDefault();\n\n        const newPerson = {\n            name: newName,\n            number: newNumber,\n        };\n\n        const existingPerson = persons.find(\n            (person) => person.name === newName\n        );\n\n        if (existingPerson !== undefined) {\n            if (\n                window.confirm(\n                    `${newName} is already added to phonebook, replace the old number with a new one?`\n                )\n            ) {\n                personService\n                    .update(existingPerson.id, newPerson)\n                    .then((updatedPerson) => {\n                        setPersons(\n                            persons.map((person) =>\n                                person.id !== existingPerson.id\n                                    ? person\n                                    : updatedPerson\n                            )\n                        );\n                        setNewName(\"\");\n                        setNewNumber(\"\");\n\n                        setSuccessMessage(`Updated ${newPerson.name}`);\n\n                        setTimeout(() => {\n                            setSuccessMessage(null);\n                        }, 5000);\n                    });\n            }\n        } else {\n            personService.create(newPerson).then((returnedPerson) => {\n                setPersons(persons.concat(returnedPerson));\n                setNewName(\"\");\n                setNewNumber(\"\");\n\n                setSuccessMessage(`Added ${newPerson.name}`);\n\n                setTimeout(() => {\n                    setSuccessMessage(null);\n                }, 5000);\n            });\n        }\n    };\n\n    const handlePhoneChange = (event) => {\n        setNewName(event.target.value);\n    };\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value);\n    };\n\n    const deleteEntry = (person) => {\n        const deletedId = person.id;\n\n        if (window.confirm(`Delete ${person.name} ?`)) {\n            personService\n                .deletePerson(person.id)\n                .then(() => {\n                    setPersons(\n                        persons.filter((person) => person.id !== deletedId)\n                    );\n\n                    setSuccessMessage(`Deleted ${person.name}`);\n\n                    setTimeout(() => {\n                        setSuccessMessage(null);\n                    }, 5000);\n                })\n                .catch((_) => {\n                    setErrorMessage(\n                        `${person.name} has already been removed from server`\n                    );\n\n                    setTimeout(() => {\n                        setErrorMessage(null);\n                    }, 5000);\n                });\n        }\n    };\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <Notification message={successMessage} />\n            <Error error={error} />\n            <PersonForm\n                addPerson={addPerson}\n                newName={newName}\n                newNumber={newNumber}\n                handlePhoneChange={handlePhoneChange}\n                handleNumberChange={handleNumberChange}\n            />\n            <h2>Numbers</h2>\n            <Persons persons={persons} onDelete={deleteEntry} />\n        </div>\n    );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}